// <auto-generated />
using EFCoreCodeFirstDemo.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreCodeFirstDemo.Migrations
{
    [DbContext(typeof(SMSCoreDbContext))]
    [Migration("20231207130541_schoolMS")]
    partial class schoolMS
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Course", b =>
                {
                    b.Property<int>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("courseId"));

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("professorId")
                        .HasColumnType("int");

                    b.HasKey("courseId");

                    b.HasIndex("professorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Department", b =>
                {
                    b.Property<int>("departmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("departmentId"));

                    b.HasKey("departmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Enrollment", b =>
                {
                    b.Property<int>("enrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("enrollmentId"));

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("grading")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("enrollmentId");

                    b.HasIndex("courseId");

                    b.HasIndex("studentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Professor", b =>
                {
                    b.Property<int>("professorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("professorId"));

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("professorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("professorId");

                    b.HasIndex("departmentId");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Course", b =>
                {
                    b.HasOne("EFCoreCodeFirstDemo.Entities.Professor", "Professor")
                        .WithMany("Courses")
                        .HasForeignKey("professorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Enrollment", b =>
                {
                    b.HasOne("EFCoreCodeFirstDemo.Entities.Course", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreCodeFirstDemo.Entities.Student", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Professor", b =>
                {
                    b.HasOne("EFCoreCodeFirstDemo.Entities.Department", "Department")
                        .WithMany("professors")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Department", b =>
                {
                    b.Navigation("professors");
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Professor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("EFCoreCodeFirstDemo.Entities.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
